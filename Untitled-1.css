<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048遊戲</title>
    <style>
        :root {
            --grid-size: 4;
            --cell-size: 20vmin;
            --cell-gap: 2vmin;
        }

        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #faf8ef;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }

        #controls {
            margin: 20px;
            display: flex;
            gap: 20px;
            align-items: center;
        }

        #game-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #score-container {
            font-size: 24px;
            margin-bottom: 20px;
            color: #776e65;
        }

        #game-board {
            display: grid;
            gap: var(--cell-gap);
            background-color: #bbada0;
            padding: var(--cell-gap);
            border-radius: 8px;
            position: relative;
        }

        .grid-cell {
            background-color: rgba(238, 228, 218, 0.35);
            border-radius: 3px;
            position: relative;
            width: var(--cell-size);
            height: var(--cell-size);
        }

        .tile {
            width: 100%;
            height: 100%;
            position: absolute;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: calc(var(--cell-size) * 0.4);
            font-weight: bold;
            border-radius: 3px;
            transition: all 0.15s ease;
            animation: appear 0.2s ease;
        }

        .tile-2 { background-color: #eee4da; color: #776e65; }
        .tile-4 { background-color: #ede0c8; color: #776e65; }
        .tile-8 { background-color: #f2b179; color: #f9f6f2; }
        .tile-16 { background-color: #f59563; color: #f9f6f2; }
        .tile-32 { background-color: #f67c5f; color: #f9f6f2; }
        .tile-64 { background-color: #f65e3b; color: #f9f6f2; }
        .tile-128 { 
            background-color: #edcf72; 
            color: #f9f6f2;
            font-size: calc(var(--cell-size) * 0.35);
        }
        .tile-256 { 
            background-color: #edcc61; 
            color: #f9f6f2;
            font-size: calc(var(--cell-size) * 0.35);
        }
        .tile-512 { 
            background-color: #edc850; 
            color: #f9f6f2;
            font-size: calc(var(--cell-size) * 0.35);
        }
        .tile-1024 { 
            background-color: #edc53f; 
            color: #f9f6f2;
            font-size: calc(var(--cell-size) * 0.3);
        }
        .tile-2048 { 
            background-color: #edc22e; 
            color: #f9f6f2;
            font-size: calc(var(--cell-size) * 0.3);
        }

        button {
            padding: 10px 20px;
            font-size: 18px;
            background-color: #8f7a66;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        button:hover {
            background-color: #9f8b77;
        }

        input[type="number"] {
            width: 60px;
            padding: 5px;
            font-size: 16px;
            border: 2px solid #bbada0;
            border-radius: 3px;
            text-align: center;
        }

        @keyframes appear {
            0% { opacity: 0; transform: scale(0); }
            100% { opacity: 1; transform: scale(1); }
        }

        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(238, 228, 218, 0.73);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 3em;
            font-weight: bold;
            color: #776e65;
            border-radius: 8px;
        }
    </style>
</head>
<body>
    <div id="controls">
        <div>
            <label for="grid-size">格子大小：</label>
            <input type="number" id="grid-size" min="3" max="8" value="4">
        </div>
        <button id="new-game-button">新遊戲</button>
    </div>
    <div id="game-container">
        <div id="score-container">分數：<span id="score">0</span></div>
        <div id="game-board"></div>
    </div>

    <script>
        let size = 4;
        let board = [];
        let score = 0;

        function updateGridSize() {
            const newSize = parseInt(document.getElementById('grid-size').value);
            if (newSize >= 3 && newSize <= 8) {
                size = newSize;
                document.documentElement.style.setProperty('--grid-size', size);
                const gameBoard = document.getElementById('game-board');
                gameBoard.style.gridTemplateColumns = `repeat(${size}, var(--cell-size))`;
                gameBoard.style.gridTemplateRows = `repeat(${size}, var(--cell-size))`;
                initGame();
            }
        }

        function initGame() {
            board = [];
            score = 0;
            document.getElementById('score').textContent = '0';
            
            for (let i = 0; i < size; i++) {
                board[i] = new Array(size).fill(0);
            }

            const gameBoard = document.getElementById('game-board');
            gameBoard.innerHTML = '';
            gameBoard.style.gridTemplateColumns = `repeat(${size}, var(--cell-size))`;
            gameBoard.style.gridTemplateRows = `repeat(${size}, var(--cell-size))`;
            
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'grid-cell';
                    gameBoard.appendChild(cell);
                }
            }

            addNewTile();
            addNewTile();
            updateDisplay();
        }

        function addNewTile() {
            const emptyCells = [];
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    if (board[i][j] === 0) {
                        emptyCells.push({x: i, y: j});
                    }
                }
            }

            if (emptyCells.length > 0) {
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                board[randomCell.x][randomCell.y] = Math.random() < 0.9 ? 2 : 4;
            }
        }

        function updateDisplay() {
            const gameBoard = document.getElementById('game-board');
            gameBoard.innerHTML = '';
            
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    const cell = document.createElement('div');
                    cell.className = 'grid-cell';
                    
                    if (board[i][j] !== 0) {
                        const tile = document.createElement('div');
                        tile.className = `tile tile-${board[i][j]}`;
                        tile.textContent = board[i][j];
                        cell.appendChild(tile);
                    }
                    
                    gameBoard.appendChild(cell);
                }
            }
        }

        function move(direction) {
            let moved = false;
            const oldBoard = JSON.parse(JSON.stringify(board));

            function compress(line) {
                const nonZero = line.filter(cell => cell !== 0);
                const zeros = new Array(size - nonZero.length).fill(0);
                return direction === 'left' || direction === 'up' 
                    ? [...nonZero, ...zeros] 
                    : [...zeros, ...nonZero];
            }

            function merge(line) {
                if (direction === 'right' || direction === 'down') {
                    line.reverse();
                }

                for (let i = 0; i < line.length - 1; i++) {
                    if (line[i] !== 0 && line[i] === line[i + 1]) {
                        line[i] *= 2;
                        score += line[i];
                        line[i + 1] = 0;
                        i++;
                    }
                }

                if (direction === 'right' || direction === 'down') {
                    line.reverse();
                }

                return line;
            }

            if (direction === 'left' || direction === 'right') {
                for (let i = 0; i < size; i++) {
                    let row = [...board[i]];
                    row = compress(row);
                    row = merge(row);
                    row = compress(row);
                    board[i] = row;
                }
            } else {
                for (let j = 0; j < size; j++) {
                    let column = [];
                    for (let i = 0; i < size; i++) {
                        column.push(board[i][j]);
                    }
                    
                    column = compress(column);
                    column = merge(column);
                    column = compress(column);

                    for (let i = 0; i < size; i++) {
                        board[i][j] = column[i];
                    }
                }
            }

            moved = JSON.stringify(oldBoard) !== JSON.stringify(board);

            if (moved) {
                addNewTile();
                updateDisplay();
                document.getElementById('score').textContent = score;
                
                if (isGameOver()) {
                    showGameOver();
                }
            }
        }

        function isGameOver() {
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    if (board[i][j] === 0) return false;
                }
            }

            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size - 1; j++) {
                    if (board[i][j] === board[i][j + 1]) return false;
                }
            }

            for (let i = 0; i < size - 1; i++) {
                for (let j = 0; j < size; j++) {
                    if (board[i][j] === board[i + 1][j]) return false;
                }
            }

            return true;
        }

        function showGameOver() {
            const gameOver = document.createElement('div');
            gameOver.className = 'game-over';
            gameOver.textContent = '遊戲結束！';
            document.getElementById('game-board').appendChild(gameOver);
        }

        document.addEventListener('keydown', function(event) {
            switch(event.key) {
                case 'ArrowLeft':
                    event.preventDefault();
                    move('left');
                    break;
                case 'ArrowRight':
                    event.preventDefault();
                    move('right');
                    break;
                case 'ArrowUp':
                    event.preventDefault();
                    move('up');
                    break;
                case 'ArrowDown':
                    event.preventDefault();
                    move('down');
                    break;
            }
        });

        document.getElementById('grid-size').addEventListener('change', updateGridSize);
        document.getElementById('new-game-button').addEventListener('click', initGame);

        initGame();
    </script>
</body>
</html>